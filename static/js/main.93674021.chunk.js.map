{"version":3,"sources":["ProgressBar/etc.js","ProgressBar/DEFAULTS.js","ProgressBar/BarPart.js","ProgressBar/BarPoint.js","ProgressBar/BarContainer.js","ProgressBar/ProgressBar.js","useInput.js","serviceWorker.js","index.js","App.js"],"names":["sum","array","reduce","a","b","COLORS","getLineColor","i","length","getPointColor","parts","part","styled","p","total","color","left","height","right","ProgressBar","points","completed","completedSum","pointsSum","Math","max","BarContainer","map","BarPart","key","this","BarPoint","useInput","storageKey","json","useState","localStorage","get","set","JSON","parse","getJson","setJson","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","inputPoints","inputCompleted","style","margin","width","paddingTop","marginBottom","textAlign","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93674021.chunk.js","sourcesContent":["export const sum = array => array.reduce((a, b) => a + b, 0);","export const COLORS = [\r\n  '#2c73d2',\r\n  '#845ec2',\r\n  '#d65db1',\r\n  '#ff6f91',\r\n  '#ff9671',\r\n  '#ffc75f',\r\n  '#f9f871',\r\n  '#fefedf',\r\n];\r\n\r\nexport const GRAY = '#cccccc';\r\n\r\nexport const getLineColor = (i) => COLORS[i % COLORS.length];\r\n\r\nexport const getPointColor = (parts, part) => {\r\n    let sum = 0;\r\n    let i = 0;\r\n    while (i < parts.length && sum < part) sum += parts[i++];\r\n\r\n    return sum < part\r\n        ? GRAY\r\n        : getLineColor(i-1);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled('div')`\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    \r\n    width: ${p => (p.part / p.total * 100) + '%'};\r\n    height: 100%;\r\n    background-color: ${p => p.color};\r\n    \r\n    ${p => p.left && `border-radius: ${p.height}px 0 0 ${p.height}px;`}\r\n    ${p => p.right && `border-radius: 0 ${p.height}px ${p.height}px 0;`}\r\n    ${p => p.left && p.right && `border-radius: ${p.height}px;`}\r\n    \r\n    transition: width .5s;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport {GRAY} from \"./DEFAULTS\";\r\n\r\nexport default styled('div')`\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: ${p => - p.height/2}px;\r\n    left: ${p => `calc(${p.part / p.total * 100}% - ${p.height}px)`};\r\n    width: ${p => 2 * p.height}px;\r\n    height: ${p => 2 * p.height}px;\r\n    background-color: ${p => p.color};\r\n    border-radius: 100%;\r\n    ${p => p.color === GRAY && 'z-index: -1'};\r\n\r\n    transition: left .5s, background-color .5s;\r\n`;","import styled from \"styled-components\";\r\nimport {GRAY} from \"./DEFAULTS\";\r\n\r\nexport default styled('div')`\r\n    height: ${p => p.height}px;\r\n    position: relative;\r\n    \r\n    background-color: ${GRAY};\r\n    border-radius: ${p => p.height}px;\r\n    z-index: -1;\r\n`;","import React from 'react';\r\nimport {sum} from \"./etc\";\r\nimport {getLineColor, getPointColor} from \"./DEFAULTS\";\r\nimport BarPart from \"./BarPart\";\r\nimport BarPoint from \"./BarPoint\";\r\nimport BarContainer from \"./BarContainer\";\r\n\r\nexport default function ProgressBar({ points, completed, height }) {\r\n    const completedSum = sum(completed);\r\n    const pointsSum = sum(points);\r\n    const total = Math.max(pointsSum, completedSum);\r\n\r\n    return (\r\n        <BarContainer height={height}>\r\n          {completed.map((part, i) => (\r\n            <BarPart key={i} {...{part, total, height}} color={getLineColor(i)}\r\n                     left={i === 0} right={i === completed.length - 1} />\r\n          ))}\r\n\r\n          {points.map(function (part, i) {\r\n            this.sum += part;\r\n            return <BarPoint key={i} {...{total, height}} part={this.sum} color={getPointColor(completed, this.sum)} />\r\n          }, {sum: 0})}\r\n        </BarContainer>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport default function useInput(storageKey) {\r\n    const [get, set] = useState(localStorage[storageKey]);\r\n    let json;\r\n        try { json = JSON.parse(localStorage[storageKey]); }\r\n        catch { json = []; }\r\n\r\n    const [getJson, setJson] = useState(json);\r\n\r\n    const input = {\r\n        onChange: (e) => {\r\n            set(e.target.value);\r\n\r\n            try {\r\n                setJson(JSON.parse(e.target.value));\r\n                localStorage[storageKey] = e.target.value;\r\n            } catch {}\r\n        },\r\n        value: get,\r\n    };\r\n\r\n    return [getJson, input];\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport ProgressBar from \"./ProgressBar/ProgressBar\";\nimport useInput from \"./useInput\";\n\nexport default function App() {\n    const [points, inputPoints] = useInput('points');\n    const [completed, inputCompleted] = useInput('completed');\n\n    return (\n      <div>\n        <div style={{margin: '0 auto', width: '90%', paddingTop: '40vh'}}>\n          <div style={{marginBottom: '5vh', textAlign: 'center'}}>\n            <label>Points: </label><input {...inputPoints} style={{width: '33%'}}/>\n            <input {...inputCompleted} style={{width: '33%'}} /><label>: Progress</label>\n          </div>\n          <ProgressBar points={points} completed={completed} height={10} />\n        </div>\n      </div>\n    );\n}\n"],"sourceRoot":""}